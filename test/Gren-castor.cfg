process CnBAnalyzer = {
    service = DQMStore{}

    service = MessageLogger 
    {
	untracked vstring destinations   = { "debugmessages.txt" }
	untracked vstring categories     = { "FEDBuffer" }
	untracked vstring debugModules   = { "*" }
	untracked PSet debugmessages.txt = { untracked string threshold = "INFO"}
	untracked vstring debugModules =  { "CnBTest" }
    }


    # GREN 
    source = PoolSource {
	untracked vstring fileNames = {
	    "rfio:/castor/cern.ch/cms/store/data/GlobalNov07/A/000/030/261/GlobalNov07.00030261.0001.A.storageManager.0.0000.dat",
	    "rfio:/castor/cern.ch/cms/store/data/GlobalNov07/A/000/030/261/GlobalNov07.00030261.0002.A.storageManager.0.0000.dat",
	    "rfio:/castor/cern.ch/cms/store/data/GlobalNov07/A/000/030/261/GlobalNov07.00030261.0003.A.storageManager.0.0000.dat",
	    "rfio:/castor/cern.ch/cms/store/data/GlobalNov07/A/000/030/261/GlobalNov07.00030261.0004.A.storageManager.0.0000.dat",
	    "rfio:/castor/cern.ch/cms/store/data/GlobalNov07/A/000/030/261/GlobalNov07.00030261.0005.A.storageManager.0.0000.dat"
      }
    }    

    untracked PSet maxEvents = { untracked int32 input = -1 }

    module CnBTest = CnBAnalyzer
    {         
	untracked int32 swapOn = 1 // non zero value does the DAQ header offset, etc.
	untracked int32 dump = 0  // do you want a hex dump of the buffer you are reading looking at ?
	untracked int32 wordNumber = 20 // how many 32(64) bit words do you want ?
	untracked int32 percent = 1 // dow you want data displayed as a % error ?
	untracked int32 N = 10 // if the above is true, then "N" events before you update % error hitograms
	untracked int32 garb= 0 // garbles fe addressing output of real files for testing
	untracked int32 runNumber = 10238
	untracked bool UseCabling = 0  // 1 to use the cabling map and 0 to try to reconstruct from fedEvent
	untracked string rootFile = "_FED_DQM_Data.root"
	untracked string rootFileDirectory = "/tmp"
    }

    path p = { CnBTest }
}
